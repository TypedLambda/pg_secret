## Compilation

cc -c secret.c -I/usr/local/include/postgresql/server/
cc -bundle -flat_namespace -undefined suppress -o secret.so secret.o

## 22/12/2019

Is it a good idea to pass the key to the server? That means that encryption would
be performed server side. There are pros and cons to this:

pros:

* Simplified usage for devs
* Shifts some risk (e.g. poor cleanup) to modulo away from client
* Simplified client code

cons:

* Weakens trust model - client must entrust some private data to modulo (even if just for a moment)
* Postgres may inadvertantly log keys (WAL or other server logs)

So option 1:

`<key, data>` and we perform encryption server side.

Option 2:

`<ct, l, r>` and modulo never sees any plaintexts.

Questions:

Do we need to store a separate AES encrypted value or can we use the right-CT (i.e. can it be decrypted)?

Maybe we can support both options 1 and 2 and let clients decide. This could be a good way to A/B test the demand
of each option.


## 23/12/2019

Probably should make a fastore shared library and link to it during compilation.
Right now thw files in Open/fastore differ from the files here (but not sure what exactly).

Ideally, this shared library would be rewritten in Rust!

## 24/12/2019

Got a basic ORE operator class and BTREE index working (but with a weaker security assumption).
To make this better we'd avoid storing the "left" cipher texts but not sure how to fully
implement the operator class in that case.

Still, this is a milestone!

## 19/1/2020

Building using pgxs and its not linking all of the objects (only pgsecret.o).
Tried setting OBJS in the Makefile but that's not working.
See https://www.postgresql.org/docs/12/extend-pgxs.html
Looks like using `MODULE_big` was the trick!
